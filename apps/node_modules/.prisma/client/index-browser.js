
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.9.2
 * Query Engine version: bcc2ff906db47790ee902e7bbc76d7ffb1893009
 */
Prisma.prismaVersion = {
  client: "3.9.2",
  engine: "bcc2ff906db47790ee902e7bbc76d7ffb1893009"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  userId: 'userId',
  phoneNumber: 'phoneNumber',
  isPhoneConfirmed: 'isPhoneConfirmed',
  username: 'username',
  password: 'password',
  completeName: 'completeName',
  userRoleId: 'userRoleId',
  userAddressId: 'userAddressId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.TokensScalarFieldEnum = makeEnum({
  tokenId: 'tokenId',
  token: 'token',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.RoleScalarFieldEnum = makeEnum({
  roleId: 'roleId',
  userRole: 'userRole',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.AddressScalarFieldEnum = makeEnum({
  addressId: 'addressId',
  commune: 'commune',
  address: 'address',
  longitude: 'longitude',
  latitude: 'latitude',
  restauId: 'restauId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.RestaurantScalarFieldEnum = makeEnum({
  restauId: 'restauId',
  restauName: 'restauName',
  restauDescription: 'restauDescription',
  phoneNumber: 'phoneNumber',
  email: 'email',
  restauAddressId: 'restauAddressId',
  mainImageId: 'mainImageId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.RestauTokensScalarFieldEnum = makeEnum({
  tokenId: 'tokenId',
  token: 'token',
  restauUserId: 'restauUserId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.RestauUserScalarFieldEnum = makeEnum({
  restauUserId: 'restauUserId',
  restauId: 'restauId',
  userName: 'userName',
  phoneNumber: 'phoneNumber',
  completeName: 'completeName',
  userImage: 'userImage',
  password: 'password',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.RestauImagesScalarFieldEnum = makeEnum({
  imageId: 'imageId',
  address: 'address',
  publicUrl: 'publicUrl',
  imageUrl: 'imageUrl',
  restauId: 'restauId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});
exports.RestauRole = makeEnum({
  ADMIN: 'ADMIN',
  AGENT: 'AGENT'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Tokens: 'Tokens',
  Role: 'Role',
  Address: 'Address',
  Restaurant: 'Restaurant',
  RestauTokens: 'RestauTokens',
  RestauUser: 'RestauUser',
  RestauImages: 'RestauImages'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
